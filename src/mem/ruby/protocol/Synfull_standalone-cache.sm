machine(MachineType:L2Cache, "Synfull_standalone Cache")
    : Sequencer * sequencer;
      Cycles issue_latency := 2;

      // NETWORK BUFFERS
      MessageBuffer * RequestFromCache, network = "To", virtual_network="0",
        vnet_type="request";  // this L2 bank -> Memory
      MessageBuffer * ResponseFromCache, network = "To", virtual_network="2",
        vnet_type="response";  // this L2 bank -> Memory
      MessageBuffer * RequestToCache, network = "From", virtual_network="0",
        vnet_type="request";  // this Memory -> L2 bank
      MessageBuffer * ResponseToCache, network = "From", virtual_network="2",
        vnet_type="response";  // this Memory -> L2 bank

      MessageBuffer * mandatoryQueue;
{
  // STATES
  state_declaration(State, desc="Cache states", default="L2Cache_State_I") {
    I,  AccessPermission:Invalid, desc="Not Present/Invalid";
  }

  // EVENTS
  enumeration(Event, desc="Cache events") {
    RW,                 desc="Read/Write Request";
    Inv,                desc="Invalid Request";
    CD,                 desc="PutC/PutD Request";
    Read,               desc="Receive Read";
    Write,              desc="Receive Write";
    PutC,               desc="Receive PutC";
    PutD,               desc="Receive PutD";
    INV,                desc="Receive INV";
    Ack,                desc="Ack";
    Data,               desc="Data";
    WB_Ack,             desc="WB_Ack";
    Unblock,            desc="Unblock";
  }

  // STRUCTURE DEFINITIONS
  DataBlock dummyData;

  // CacheEntry
  structure(Entry, desc="...", interface="AbstractCacheEntry") {
    State CacheState,        desc="cache state";
    DataBlock DataBlk,       desc="Data in the block";
  }

  // FUNCTIONS
  Tick clockEdge();
  MachineID mapAddressToMachine(Addr addr, MachineType mtype);

  Event mandatory_request_type_to_event(RubyRequestType type) {
    if (type == RubyRequestType:LD) {
      return Event:RW;
    } 
    else if (type == RubyRequestType:IFETCH) {
      return Event:Inv;
    }
    else if (type == RubyRequestType:ST) {
      return Event:CD;
    } 
    else {
      error("Invalid RubyRequestType");
    }
  }


  State getState(Entry cache_entry, Addr addr) {
    return State:I;
  }

  void setState(Entry cache_entry, Addr addr, State state) {

  }

  AccessPermission getAccessPermission(Addr addr) {
    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Entry cache_entry, Addr addr, State state) {
  }

  Entry getCacheEntry(Addr address), return_by_pointer="yes" {
    return OOD;
  }

  void functionalRead(Addr addr, Packet *pkt) {
    error("Garnet_standalone does not support functional read.");
  }

  int functionalWrite(Addr addr, Packet *pkt) {
    error("Garnet_standalone does not support functional write.");
  }

  // NETWORK PORTS

  out_port(requestNetwork_out, RequestMsg, RequestFromCache);
  out_port(responseNetwork_out, ResponseMsg, ResponseFromCache);

  // Mandatory Queue
  in_port(mandatoryQueue_in, RubyRequest, mandatoryQueue, desc="...") {
    if (mandatoryQueue_in.isReady(clockEdge())) {
      peek(mandatoryQueue_in, RubyRequest) {
        trigger(mandatory_request_type_to_event(in_msg.Type),
                in_msg.LineAddress, getCacheEntry(in_msg.LineAddress));
      }
    }
  }

  // Receive response from directory
  in_port(responseFromDirQueue_in, ResponseMsg, ResponseToCache, desc="...") {
    if (responseFromDirQueue_in.isReady(clockEdge())) {
      peek(responseFromDirQueue_in, ResponseMsg) {
        Entry cache_entry := getCacheEntry(in_msg.addr);
        if (in_msg.Type == CoherenceResponseType:ACK) {
          trigger(Event:Ack, in_msg.addr, cache_entry);
        } 
        else if (in_msg.Type == CoherenceResponseType:WB_ACK) {
          trigger(Event:WB_Ack, in_msg.addr, cache_entry);
        }
        else if (in_msg.Type == CoherenceResponseType:DATA) {
          trigger(Event:Data, in_msg.addr, cache_entry);
        }
        else if (in_msg.Type == CoherenceResponseType:UNBLOCK) {
          trigger(Event:Unblock, in_msg.addr, cache_entry);
        }
        else {
          error("Invalid message");
        }
      }
    }
  }

  // Receive request from directory
  in_port(requestFromDirQueue_in, RequestMsg, RequestToCache, desc="...") {
    if (requestFromDirQueue_in.isReady(clockEdge())) {
      peek(requestFromDirQueue_in, RequestMsg) {
        Entry cache_entry := getCacheEntry(in_msg.addr);
        if (in_msg.Type == CoherenceRequestType:READ) {
          trigger(Event:Read, in_msg.addr, cache_entry);
        }
        else if (in_msg.Type == CoherenceRequestType:WRITE) {
          trigger(Event:Write, in_msg.addr, cache_entry);
        }
        else if (in_msg.Type == CoherenceRequestType:PUTC) {
          trigger(Event:PutC, in_msg.addr, cache_entry);
        }
        else if (in_msg.Type == CoherenceRequestType:PUTD) {
          trigger(Event:PutD, in_msg.addr, cache_entry);
        }
        else if (in_msg.Type == CoherenceRequestType:INV) {
          trigger(Event:INV, in_msg.addr, cache_entry);
        }
        else {
          error("Invalid message");
        }
      }
    }
  }

  // ACTIONS

  // The destination directory of the packets is embedded in the address
  // map_Address_to_Directory is used to retrieve it.

  // action(a_issueRead, "a", desc="Issue a Read Request") {
  //   enqueue(requestNetwork_out, RequestMsg, issue_latency) {
  //     out_msg.addr := address;
  //     out_msg.Type := CoherenceRequestType:READ;
  //     out_msg.Requestor := machineID;
  //     out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
  //     out_msg.MessageSize := MessageSizeType:Control;
  //   }
  // }

  // action(b_issueWrite, "b", desc="Issue a Write Request") {
  //   enqueue(requestNetwork_out, RequestMsg, issue_latency) {
  //     out_msg.addr := address;
  //     out_msg.Type := CoherenceRequestType:WRITE;
  //     out_msg.Requestor := machineID;
  //     out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
  //     out_msg.MessageSize := MessageSizeType:Control;
  //   }
  // }

  action(w_issueRW, "w", desc="Issue a R/W Request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
      out_msg.addr := address;
      out_msg.Type := CoherenceRequestType:READ;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  // action(c_issuePutC, "c", desc="Issue a PutC Request") {
  //   enqueue(requestNetwork_out, RequestMsg, issue_latency) {
  //     out_msg.addr := address;
  //     out_msg.Type := CoherenceRequestType:PUTC;
  //     out_msg.Requestor := machineID;
  //     out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
  //     out_msg.MessageSize := MessageSizeType:Control;
  //   }
  // }

  // action(d_issuePutD, "d", desc="Issue a PutD Request") {
  //   enqueue(requestNetwork_out, RequestMsg, issue_latency) {
  //     out_msg.addr := address;
  //     out_msg.Type := CoherenceRequestType:PUTD;
  //     out_msg.Requestor := machineID;
  //     out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
  //     out_msg.MessageSize := MessageSizeType:Control;
  //   }
  // }

  action(x_issueCD, "x", desc="Issue a C/D Request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
      out_msg.addr := address;
      out_msg.Type := CoherenceRequestType:PUTC;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  action(e_issueInv, "e", desc="Issue a Inv Request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
      out_msg.addr := address;
      out_msg.Type := CoherenceRequestType:INV;
      out_msg.Requestor := machineID;
      out_msg.Destination := broadcast(MachineType:Directory);
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  action(f_issueAck, "f", desc="Issue a Ack") {
    peek(requestFromDirQueue_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, issue_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceResponseType:ACK;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Control;
      }
    }
  }

  action(g_issueWB_Ack, "g", desc="Issue a WB_Ack") {
    peek(requestFromDirQueue_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, issue_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceResponseType:WB_ACK;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Control;
      }
    }
  }

  action(h_issueData, "h", desc="Issue a Data") {
    peek(requestFromDirQueue_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, issue_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceResponseType:DATA;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Data;
      }
    }
  }

  action(i_issueUnblock, "i", desc="Issue a Unblock") {
    peek(responseFromDirQueue_in, ResponseMsg) {
      enqueue(responseNetwork_out, ResponseMsg, issue_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceResponseType:UNBLOCK;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Control;
      }
    }
  }

  action(t_popDirResponseQueue, "t", desc="Pop the DirResponse queue") {
    responseFromDirQueue_in.dequeue(clockEdge());
  }

  action(u_popDirRequestQueue, "u", desc="Pop the DirRequest queue") {
    requestFromDirQueue_in.dequeue(clockEdge());
  }

  action(m_popMandatoryQueue, "m", desc="Pop the mandatory request queue") {
    mandatoryQueue_in.dequeue(clockEdge());
  }

  action(r_load_hit, "r", desc="Notify sequencer the load completed.") {
    sequencer.readCallback(address, dummyData);
  }

  action(s_store_hit, "s", desc="Notify sequencer that store completed.") {
    sequencer.writeCallback(address, dummyData);
  }

  // TRANSITIONS

  // sequencer hit call back is performed after injecting the packets.
  // The goal of the Garnet_standalone protocol is only to inject packets into
  // the network, not to keep track of them via TBEs.

  transition(I, Inv) {
    s_store_hit;
    e_issueInv;
    m_popMandatoryQueue;
  }

  transition(I, CD) {
    s_store_hit;
    x_issueCD;
    m_popMandatoryQueue;
  }

  transition(I, RW) {
    r_load_hit;
    w_issueRW;
    m_popMandatoryQueue;
  }

  transition(I, {Read, Write}) {
    h_issueData;
    u_popDirRequestQueue;
  }

  transition(I, {PutC, PutD}) {
    g_issueWB_Ack;
    u_popDirRequestQueue;
  }

  transition(I, INV) {
    f_issueAck;
    u_popDirRequestQueue;
  }

  transition(I, {Ack, WB_Ack, Unblock}) {
    t_popDirResponseQueue;
  }

  transition(I, Data) {
    i_issueUnblock;
    t_popDirResponseQueue;
  }  
}