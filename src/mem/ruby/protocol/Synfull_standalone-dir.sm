/*
 * Copyright (c) 2009 Advanced Micro Devices, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


machine(MachineType:Directory, "Synfull_standalone Directory")
    : MessageBuffer * RequestToDir, network="From", virtual_network="0",
        vnet_type = "request";
      MessageBuffer * ResponseToDir, network="From", virtual_network="2",
        vnet_type = "response";
      MessageBuffer * RequestToCache, network="To", virtual_network="0",
        vnet_type = "request";
      MessageBuffer * ResponseToCache, network="To", virtual_network="2",
        vnet_type = "response";
      Cycles issue_latency := 2;
{
  // STATES 
  state_declaration(State, desc="Directory states", default="Directory_State_I") {
    // Base states
    I, AccessPermission:Invalid, desc="Invalid";
  }

  // Events
  enumeration(Event, desc="Directory events") {
    // processor requests
    Read,               desc="Receive Read";
    Write,              desc="Receive Write";
    PutC,               desc="Receive PutC";
    PutD,               desc="Receive PutD";
    INV,                desc="Receive INV";
    Ack,                desc="Ack";
    Data,               desc="Data";
    WB_Ack,             desc="WB_Ack";
    Unblock,            desc="Unblock";
  }

  // TYPES
  // DirectoryEntry
  structure(Entry, desc="...", interface="AbstractCacheEntry", main="false") {
    State DirectoryState,          desc="Directory state";
    DataBlock DataBlk,             desc="data for the block";
  }

  // ** FUNCTIONS **
  Tick clockEdge();
  MachineID mapAddressToMachine(Addr addr, MachineType mtype);

  State getState(Addr addr) {
    return State:I;
  }

  void setState(Addr addr, State state) {

  }

  AccessPermission getAccessPermission(Addr addr) {
    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Addr addr, State state) {
  }

  void functionalRead(Addr addr, Packet *pkt) {
    error("Garnet_standalone does not support functional read.");
  }

  int functionalWrite(Addr addr, Packet *pkt) {
    error("Garnet_standalone does not support functional write.");
  }

  out_port(requestNetwork_out, RequestMsg, RequestToCache);
  out_port(responseNetwork_out, ResponseMsg, ResponseToCache);

  // ** IN_PORTS **

  // Receive response from directory
  in_port(responseFromCacheQueue_in, ResponseMsg, ResponseToDir, desc="...") {
    if (responseFromCacheQueue_in.isReady(clockEdge())) {
      peek(responseFromCacheQueue_in, ResponseMsg) {
        if (in_msg.Type == CoherenceResponseType:ACK) {
          trigger(Event:Ack, in_msg.addr);
        } 
        else if (in_msg.Type == CoherenceResponseType:WB_ACK) {
          trigger(Event:WB_Ack, in_msg.addr);
        }
        else if (in_msg.Type == CoherenceResponseType:DATA) {
          trigger(Event:Data, in_msg.addr);
        }
        else if (in_msg.Type == CoherenceResponseType:UNBLOCK) {
          trigger(Event:Unblock, in_msg.addr);
        }
        else {
          error("Invalid message");
        }
      }
    }
  }

  // Receive request from directory
  in_port(requestFromCacheQueue_in, RequestMsg, RequestToDir, desc="...") {
    if (requestFromCacheQueue_in.isReady(clockEdge())) {
      peek(requestFromCacheQueue_in, RequestMsg) {
        if (in_msg.Type == CoherenceRequestType:READ) {
          trigger(Event:Read, in_msg.addr);
        }
        else if (in_msg.Type == CoherenceRequestType:WRITE) {
          trigger(Event:Write, in_msg.addr);
        }
        else if (in_msg.Type == CoherenceRequestType:PUTC) {
          trigger(Event:PutC, in_msg.addr);
        }
        else if (in_msg.Type == CoherenceRequestType:PUTD) {
          trigger(Event:PutD, in_msg.addr);
        }
        else if (in_msg.Type == CoherenceRequestType:INV) {
          trigger(Event:INV, in_msg.addr);
        }
        else {
          error("Invalid message");
        }
      }
    }
  }

  // ACTIONS

  // The destination directory of the packets is embedded in the address
  // map_Address_to_Directory is used to retrieve it.

  action(f_issueAck, "f", desc="Issue a Ack") {
    peek(requestFromCacheQueue_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, issue_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceResponseType:ACK;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Control;
      }
    }
  }

  action(g_issueWB_Ack, "g", desc="Issue a WB_Ack") {
    peek(requestFromCacheQueue_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, issue_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceResponseType:WB_ACK;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Control;
      }
    }
  }

  action(h_issueData, "h", desc="Issue a Data") {
    peek(requestFromCacheQueue_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, issue_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceResponseType:DATA;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Data;
      }
    }
  }

  action(i_issueUnblock, "i", desc="Issue a Unblock") {
    peek(responseFromCacheQueue_in, ResponseMsg) {
      enqueue(responseNetwork_out, ResponseMsg, issue_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceResponseType:UNBLOCK;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Control;
      }
    }
  }

  action(t_popCacheResponseQueue, "t", desc="Pop the CacheResponse queue") {
    responseFromCacheQueue_in.dequeue(clockEdge());
  }

  action(u_popCacheRequestQueue, "u", desc="Pop the CacheRequest queue") {
    requestFromCacheQueue_in.dequeue(clockEdge());
  }

  // TRANSITIONS

  // sequencer hit call back is performed after injecting the packets.
  // The goal of the Garnet_standalone protocol is only to inject packets into
  // the network, not to keep track of them via TBEs.

  transition(I, {Read, Write}) {
    h_issueData;
    u_popCacheRequestQueue;
  }

  transition(I, {PutC, PutD}) {
    g_issueWB_Ack;
    u_popCacheRequestQueue;
  }

  transition(I, INV) {
    f_issueAck;
    u_popCacheRequestQueue;
  }

  transition(I, {Ack, WB_Ack, Unblock}) {
    t_popCacheResponseQueue;
  }

  transition(I, Data) {
    i_issueUnblock;
    t_popCacheResponseQueue;
  } 
}